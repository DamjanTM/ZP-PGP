/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etf.openpgp.pd170312duu170714d;

import java.awt.CardLayout;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.Security;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import org.bouncycastle.bcpg.ArmoredInputStream;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.PGPEncryptedData;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPSecretKey;
import org.bouncycastle.openpgp.PGPSecretKeyRing;
import org.bouncycastle.openpgp.PGPUtil;
import org.bouncycastle.util.encoders.Base64;

/**
 *
 * @author Damjan
 */

public class Window extends javax.swing.JFrame {

    public static SecretKeyChain sKeyChain = new SecretKeyChain();
    public static PublicKeyChain pKeyChain = new PublicKeyChain();
    private PGP.PgpMessage pgp_mess;
    public Window() {
        initComponents();
        Security.addProvider(new BouncyCastleProvider());
    }

    public static class SimpleRFC288Message 
    {
        public String emailFrom;
        public String emailTo;
        public String message;
        
        public SimpleRFC288Message(String emailFrom, String emailTo, String message)
        {
            this.emailFrom = emailFrom;
            this.emailTo = emailTo;
            this.message = message;
        }
        
        public static SimpleRFC288Message fromSimplifiedRFC822(String srfc822) {
            try {
                int emailFromIndex = srfc822.indexOf("\n");
                String emailFrom = srfc822.substring(6, emailFromIndex);  // From: 
                srfc822 = srfc822.substring(emailFromIndex + 1, srfc822.length());

                int emailToIndex = srfc822.indexOf("\n");
                String emailTo = srfc822.substring(4, emailToIndex);  // To:
                srfc822 = srfc822.substring(emailToIndex + 1, srfc822.length());

                int messageStartIndex = srfc822.indexOf("\n");
                String message = srfc822.substring(messageStartIndex + 1, srfc822.length());

                return new SimpleRFC288Message(emailFrom, emailTo, message);
            }
            catch(Exception e) {
                return new SimpleRFC288Message("", "", srfc822);
            }
        }
        
        public String ConvertToSimplifiedRFC822()
        {
            String srfc822 = "From: " + emailFrom + "\n"
                    + "To: " + emailTo + "\n"
                    + "Message: " + "\n"
                    + message;

            return srfc822;
        }
        
        public void print()
        {
            System.out.println("From: " + emailFrom);
            System.out.println("To: " + emailTo);
            System.out.println("Message:\n" + message);
        }
    };
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dsaKeySizeBG = new javax.swing.ButtonGroup();
        elgamalKeySizeBG = new javax.swing.ButtonGroup();
        encriptionAlgBG = new javax.swing.ButtonGroup();
        generatorDialog = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jButton6 = new javax.swing.JButton();
        jCardPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        sendPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgTextArea = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        fromComboBox = new javax.swing.JComboBox<>();
        toComboBox = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        sendPasswordField = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        doSign = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        doEncriptAsym = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        doZip = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        doEncryptSym = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        j3desEncryptionRadioButton = new javax.swing.JRadioButton();
        jIDEAEncryptionRadioButton = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        doSerialize = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        sendMsgBut = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        sendWarningLabel = new javax.swing.JLabel();
        recievePanel = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        recieveTextArea = new javax.swing.JTextArea();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        decrypt_password_field = new javax.swing.JPasswordField();
        jButton10 = new javax.swing.JButton();
        keyringPanel = new javax.swing.JTabbedPane();
        publicKeyPanel = new javax.swing.JPanel();
        jButton16 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        publicKeyTable = new javax.swing.JTable();
        publicKeyImportBut = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        privateKeyPanel = new javax.swing.JPanel();
        jButton17 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        privateKeyTable = new javax.swing.JTable();
        privateKeyImportBut = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        generatorDialog.setTitle("ZP projekat OpenPGP");
        generatorDialog.setMinimumSize(new java.awt.Dimension(470, 290));
        generatorDialog.setResizable(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(470, 225));

        jLabel8.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Generiši Par Ključeva");

        jLabel22.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel22.setText("Ime:");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("DSA ključ veličine");

        dsaKeySizeBG.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("1024");

        dsaKeySizeBG.add(jRadioButton2);
        jRadioButton2.setText("2048");

        jLabel6.setText("bita.");

        jLabel9.setText("ElGamal ključ veličine");

        elgamalKeySizeBG.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.setText("1024");

        elgamalKeySizeBG.add(jRadioButton4);
        jRadioButton4.setText("2048");

        elgamalKeySizeBG.add(jRadioButton5);
        jRadioButton5.setText("4096");

        jLabel10.setText("bita.");

        jLabel23.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel23.setText("E-mail:");

        jLabel24.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel24.setText("Šifra:");

        jButton6.setText("Generiši");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_private_keysActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(jButton6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordField))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton4)
                            .addComponent(jLabel10)
                            .addComponent(jRadioButton5))
                        .addContainerGap(53, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout generatorDialogLayout = new javax.swing.GroupLayout(generatorDialog.getContentPane());
        generatorDialog.getContentPane().setLayout(generatorDialogLayout);
        generatorDialogLayout.setHorizontalGroup(
            generatorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
            .addGroup(generatorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(generatorDialogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        generatorDialogLayout.setVerticalGroup(
            generatorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
            .addGroup(generatorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(generatorDialogLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ZP projekat OpenPGP");
        setResizable(false);

        jCardPanel.setLayout(new java.awt.CardLayout());

        homePanel.setMinimumSize(new java.awt.Dimension(221, 42));
        homePanel.setPreferredSize(new java.awt.Dimension(720, 400));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ZP OpenPGP");

        jButton1.setText("Pošalji Poruku");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Primi Poruku");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Prikaži Prsten Ključeva");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Napravili Uroš Ugrinić 17/0714 i Damjan Pavlović 17/0312");
        jLabel20.setEnabled(false);

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(244, 244, 244)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(248, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(12, 12, 12)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addComponent(jLabel20)
                .addContainerGap())
        );

        jCardPanel.add(homePanel, "homeCard");

        sendPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                sendPanelComponentShown(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel2.setText("Sadržaj Poruke");

        msgTextArea.setColumns(20);
        msgTextArea.setRows(5);
        jScrollPane1.setViewportView(msgTextArea);

        jButton4.setText("Uvezi tekst");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Dalje");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel25.setText("Od:");

        toComboBox.setSelectedItem(publicKeyTable);

        jLabel26.setText("Ka:");

        jLabel3.setText("Šifra:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel26))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fromComboBox, 0, 376, Short.MAX_VALUE)
                                    .addComponent(toComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(43, 43, 43)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton4))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sendPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        sendPanel.addTab("Poruka", jPanel2);

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel4.setText("Potpisivanje");
        jLabel4.setToolTipText("");

        doSign.setSelected(true);

        jLabel7.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel7.setText("Enkripcija");
        jLabel7.setToolTipText("");

        doEncriptAsym.setSelected(true);
        doEncriptAsym.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doEncriptAsymActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel15.setText("Za potpisivanje koristimo DSA algoritam");

        jLabel16.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel16.setText("Za asimetričnu enkripciju koristimo ElGamalov algoritam.");

        doZip.setSelected(true);

        jLabel11.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel11.setText("Kompresija");
        jLabel11.setToolTipText("");

        jLabel17.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel17.setText("Za kompresiju koristimo Zip algoritam.");

        jLabel12.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel12.setText("Enkripcija");
        jLabel12.setToolTipText("");

        doEncryptSym.setSelected(true);
        doEncryptSym.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doEncryptSymActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel18.setText("Simetrična enkripcija koristeći jedan od sledećih algoritama.");

        encriptionAlgBG.add(j3desEncryptionRadioButton);
        j3desEncryptionRadioButton.setSelected(true);
        j3desEncryptionRadioButton.setText("3DES");

        encriptionAlgBG.add(jIDEAEncryptionRadioButton);
        jIDEAEncryptionRadioButton.setText("IDEA");

        jLabel13.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel13.setText("Enkodovanje");
        jLabel13.setToolTipText("");

        doSerialize.setSelected(true);

        jLabel19.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel19.setText("Enkodovanje se vrši u radix64 format.");

        sendMsgBut.setText("Sačuvaj poruku u fajl");
        sendMsgBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMsgButActionPerformed(evt);
            }
        });

        jButton13.setText("Odustani");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        sendWarningLabel.setForeground(new java.awt.Color(187, 87, 87));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doEncryptSym))
                            .addComponent(jLabel18)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(j3desEncryptionRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jIDEAEncryptionRadioButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sendWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sendMsgBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(doSign)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE))
                                .addGap(12, 12, 12))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(doZip))
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doSerialize))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(doEncriptAsym))
                            .addComponent(jLabel16))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(doSign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(doEncriptAsym, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(doZip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(doSerialize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(doEncryptSym, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(j3desEncryptionRadioButton)
                    .addComponent(jIDEAEncryptionRadioButton))
                .addGap(4, 4, 4)
                .addComponent(sendWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendMsgBut)
                    .addComponent(jButton13))
                .addContainerGap())
        );

        sendPanel.addTab("Podešavanja", jPanel3);

        jCardPanel.add(sendPanel, "sendCard");
        sendPanel.getAccessibleContext().setAccessibleName("Poruka");

        jLabel21.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel21.setText("Primanje Poruke");

        recieveTextArea.setColumns(20);
        recieveTextArea.setRows(5);
        jScrollPane2.setViewportView(recieveTextArea);

        jButton14.setText("Uvezi poruku");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_message_button(evt);
            }
        });

        jButton15.setText("Nazad");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        decrypt_password_field.setText("jPasswordField1");

        jButton10.setText("Dešifruj");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decrypt_message_button(evt);
            }
        });

        javax.swing.GroupLayout recievePanelLayout = new javax.swing.GroupLayout(recievePanel);
        recievePanel.setLayout(recievePanelLayout);
        recievePanelLayout.setHorizontalGroup(
            recievePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recievePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recievePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, recievePanelLayout.createSequentialGroup()
                        .addComponent(jButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 391, Short.MAX_VALUE)
                        .addComponent(decrypt_password_field, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, recievePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton14)))
                .addContainerGap())
            .addGroup(recievePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(recievePanelLayout.createSequentialGroup()
                    .addGap(7, 7, 7)
                    .addGroup(recievePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                        .addGroup(recievePanelLayout.createSequentialGroup()
                            .addComponent(jLabel21)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGap(7, 7, 7)))
        );
        recievePanelLayout.setVerticalGroup(
            recievePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, recievePanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 320, Short.MAX_VALUE)
                .addGroup(recievePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decrypt_password_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10)
                    .addComponent(jButton15))
                .addGap(16, 16, 16))
            .addGroup(recievePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(recievePanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(jLabel21)
                    .addGap(29, 29, 29)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                    .addGap(63, 63, 63)))
        );

        jCardPanel.add(recievePanel, "recieveCard");

        jButton16.setText("Nazad");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        publicKeyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ime", "E-Mail", "ID Ključa", "null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(publicKeyTable);
        if (publicKeyTable.getColumnModel().getColumnCount() > 0) {
            publicKeyTable.getColumnModel().getColumn(2).setResizable(false);
            publicKeyTable.getColumnModel().getColumn(3).setMinWidth(0);
            publicKeyTable.getColumnModel().getColumn(3).setPreferredWidth(0);
            publicKeyTable.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        publicKeyImportBut.setText("Uvezi");
        publicKeyImportBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publicKeyImportButActionPerformed(evt);
            }
        });

        jButton9.setText("Izvezi");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export_pub_keyActionPerformed(evt);
            }
        });

        jButton8.setText("Izbriši");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_pub_keyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout publicKeyPanelLayout = new javax.swing.GroupLayout(publicKeyPanel);
        publicKeyPanel.setLayout(publicKeyPanelLayout);
        publicKeyPanelLayout.setHorizontalGroup(
            publicKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(publicKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(publicKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, publicKeyPanelLayout.createSequentialGroup()
                        .addComponent(publicKeyImportBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton16))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE))
                .addContainerGap())
        );
        publicKeyPanelLayout.setVerticalGroup(
            publicKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, publicKeyPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(publicKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton16)
                    .addComponent(publicKeyImportBut)
                    .addComponent(jButton9)
                    .addComponent(jButton8))
                .addContainerGap())
        );

        keyringPanel.addTab("Javni Kljucevi", publicKeyPanel);

        jButton17.setText("Nazad");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        privateKeyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ime", "E-Mail", "ID Ključa", "null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        privateKeyTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(privateKeyTable);
        if (privateKeyTable.getColumnModel().getColumnCount() > 0) {
            privateKeyTable.getColumnModel().getColumn(3).setPreferredWidth(0);
            privateKeyTable.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        privateKeyImportBut.setText("Uvezi");
        privateKeyImportBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateKeyImportButActionPerformed(evt);
            }
        });

        jButton11.setText("Izvezi");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export_private_keyActionPerformed(evt);
            }
        });

        jButton12.setText("Generiši Ključeve");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton7.setText("Izbriši");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_private_keyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout privateKeyPanelLayout = new javax.swing.GroupLayout(privateKeyPanel);
        privateKeyPanel.setLayout(privateKeyPanelLayout);
        privateKeyPanelLayout.setHorizontalGroup(
            privateKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(privateKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(privateKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(privateKeyPanelLayout.createSequentialGroup()
                        .addComponent(privateKeyImportBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 278, Short.MAX_VALUE)
                        .addComponent(jButton17))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE))
                .addContainerGap())
        );
        privateKeyPanelLayout.setVerticalGroup(
            privateKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, privateKeyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(privateKeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton17)
                    .addComponent(privateKeyImportBut)
                    .addComponent(jButton11)
                    .addComponent(jButton12)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        keyringPanel.addTab("Privatni Kljucevi", privateKeyPanel);

        jCardPanel.add(keyringPanel, "keyringCard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jCardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jCardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CardLayout card = (CardLayout)jCardPanel.getLayout();
        card.show(jCardPanel, "recieveCard");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CardLayout card = (CardLayout)jCardPanel.getLayout();
        card.show(jCardPanel, "sendCard");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        CardLayout card = (CardLayout)jCardPanel.getLayout();
        card.show(jCardPanel, "homeCard");
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        CardLayout card = (CardLayout)jCardPanel.getLayout();
        card.show(jCardPanel, "keyringCard");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        CardLayout card = (CardLayout)jCardPanel.getLayout();
        card.show(jCardPanel, "homeCard");
        
        keyringPanel.setSelectedIndex(0);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void doEncryptSymActionPerformed(java.awt.event.ActionEvent evt) {                                             
        doEncriptAsym.setSelected(doEncryptSym.isSelected());
    }                                            

    private void doEncriptAsymActionPerformed(java.awt.event.ActionEvent evt) {                                              
        doEncryptSym.setSelected(doEncriptAsym.isSelected());
    }                                             

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        sendPanel.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // Import text on send form
            Path directory = Utils.getUserSelectedFilePath(JFileChooser.OPEN_DIALOG, "txt");
            msgTextArea.setText(Files.readString(directory));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void generate_private_keysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_private_keysActionPerformed

        int dsa_size = 0;
        int eg_size = 0;
        if (jRadioButton1.isSelected()) dsa_size=1024;
        else if (jRadioButton2.isSelected()) dsa_size=2048;
        
        if (jRadioButton3.isSelected()) eg_size=1024;
        else if (jRadioButton4.isSelected()) eg_size=2048;
        else if (jRadioButton5.isSelected()) eg_size=4096;
        
        String ime = nameField.getText();
        String email = emailField.getText();
        String password = passwordField.getText();
        

        if( ime.equals("") || email.equals("") || password.equals("") )
        {
            return;
        }
        
        KeyRingGen krg = new KeyRingGen(dsa_size, eg_size, ime, email, password);
        sKeyChain.addSecretKey(krg.get_keyring_generator());
        pKeyChain.addPublicKey(krg.get_keyring_generator());
        sKeyChain.saveKeysToFile(null);
        pKeyChain.saveKeysToFile(null);

        update_private_key_table();
        update_public_key_table();
    }//GEN-LAST:event_generate_private_keysActionPerformed

    private void update_private_key_table()
    {
        DefaultTableModel model = ( DefaultTableModel )privateKeyTable.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for( int i = rowCount - 1; i >= 0; i-- )
        {
            model.removeRow( i );
        }
        Iterator<PGPSecretKeyRing> iter = sKeyChain.getSecretKeysCollection().getKeyRings();
        while( iter.hasNext() )
        {
            PGPSecretKeyRing keyRing = iter.next();
            
            Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
            PGPSecretKey key = keyIter.next();
            
            String nameAndEmail = ( String )key.getUserIDs().next();
            String[] parsed = nameAndEmail.split( " " );
            String email = parsed[ parsed.length - 1 ];
            String name = "";
            for( int i = 0; i < parsed.length - 1; i++ )
            {
                name += parsed[ i ];
                if( i < parsed.length - 2 )
                {
                    name += " ";
                }
            }
            
            model.addRow( new Object[]
            {
                name, email, Utils.keyIdToHexString( key.getKeyID() ), key.getKeyID()
            } );
        }
    }
    
    private void update_email_from()
    {
        fromComboBox.removeAllItems();

        Iterator<PGPSecretKeyRing> iter = sKeyChain.getSecretKeysCollection().getKeyRings();
        while( iter.hasNext() )
        {
            PGPSecretKeyRing keyRing = iter.next();
            
            Iterator<PGPSecretKey> keyIter = keyRing.getSecretKeys();
            PGPSecretKey key = keyIter.next();
            
            String nameAndEmail = ( String )key.getUserIDs().next();
            String[] parsed = nameAndEmail.split( " " );
            
            String userEmail = parsed[ parsed.length - 1 ];
            String userName = "";
            for( int i = 0; i < parsed.length - 1; i++ )
            {
                userName += parsed[ i ];
                if( i < parsed.length - 2 )
                {
                    userName += " ";
                }
            }
            
            String keyId = Utils.keyIdToHexString( key.getKeyID() );
            
            fromComboBox.addItem( userName + " " + userEmail + " | " + keyId );
        }
    }

    private void update_email_to()
    {
        toComboBox.removeAllItems();

        Iterator<PGPPublicKeyRing> iter = pKeyChain.getPublicKeysCollection().getKeyRings();
        while( iter.hasNext() )
        {
            PGPPublicKeyRing keyRing = iter.next();
            
            Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys();
            PGPPublicKey key = keyIter.next();
            
            String userEmail = new String( ( byte[] )key.getRawUserIDs().next(), StandardCharsets.UTF_8 );
            String keyId = Utils.keyIdToHexString( key.getKeyID() );
            toComboBox.addItem( userEmail + " | " + keyId );
        }
    }
    
    private void update_public_key_table()
    {
        DefaultTableModel model = ( DefaultTableModel )publicKeyTable.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for( int i = rowCount - 1; i >= 0; i-- )
        {
            model.removeRow( i );
        }
        Iterator<PGPPublicKeyRing> iter = pKeyChain.getPublicKeysCollection().getKeyRings();
        while( iter.hasNext() )
        {
            PGPPublicKeyRing keyRing = iter.next();
            
            Iterator<PGPPublicKey> keyIter = keyRing.getPublicKeys();
            PGPPublicKey key = keyIter.next();
            
            String nameAndEmail = ( String )key.getUserIDs().next();
            String[] parsed = nameAndEmail.split( " " );
            String email = parsed[ parsed.length - 1 ];
            String name = "";
            for( int i = 0; i < parsed.length - 1; i++ )
            {
                name += parsed[ i ];
                if( i < parsed.length - 2 )
                {
                    name += " ";
                }
            }
            
            model.addRow( new Object[]
            {
                name, email, Utils.keyIdToHexString( key.getKeyID() ), key.getKeyID()
            } );
        }
    }
    
    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        CardLayout card = (CardLayout)jCardPanel.getLayout();
        card.show(jCardPanel, "homeCard");

        keyringPanel.setSelectedIndex(0);
        sendWarningLabel.setText("");
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        CardLayout card = (CardLayout)jCardPanel.getLayout();
        card.show(jCardPanel, "homeCard");

        sendPanel.setSelectedIndex(0);
        sendWarningLabel.setText("");
    }                                         

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        generatorDialog.setVisible(true);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void privateKeyImportButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateKeyImportButActionPerformed
        // Import private keypair
        
        Path directory = Utils.getUserSelectedFilePath(JFileChooser.OPEN_DIALOG, "asc");
        
        sKeyChain.importSecretKey( directory.toString() );
        sKeyChain.saveKeysToFile(null);
        update_private_key_table();
        
    }//GEN-LAST:event_privateKeyImportButActionPerformed

    private void publicKeyImportButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publicKeyImportButActionPerformed
        // Import javnog keypair
        
        Path directory = Utils.getUserSelectedFilePath(JFileChooser.OPEN_DIALOG, "asc");

        // TO-DO Ovde treba importovati selektovani fajl (directory)
        pKeyChain.importPublicKey(directory.toString());
        pKeyChain.saveKeysToFile(null);
        
        update_public_key_table();
    }//GEN-LAST:event_publicKeyImportButActionPerformed

    private void export_private_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export_private_keyActionPerformed
        // TODO add your handling code here:
        //export privatnog kljuca
        
        Path path = Utils.getUserSelectedFilePath( Utils.SAVE_DIALOG, "asc" );
        System.out.println(path.toString());
        
        //dohvati keyID
        int rowIdx = privateKeyTable.getSelectedRow();

        if( rowIdx < 0 )
            return;

        long keyID = ( long )privateKeyTable.getValueAt( rowIdx, 3 );
        
        PGPSecretKeyRing export_keypair = sKeyChain.getSecretKeyRing( keyID );
        SecretKeyChain.exportSecretKey( export_keypair, path.toString() );
    }//GEN-LAST:event_export_private_keyActionPerformed

    private void delete_private_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_private_keyActionPerformed
        int rowIdx = privateKeyTable.getSelectedRow();

        if( rowIdx < 0 )
            return;

        long keyID = ( long )privateKeyTable.getValueAt( rowIdx, 3 );
        PGPSecretKeyRing delete = sKeyChain.getSecretKeyRing( keyID );
        sKeyChain.removeSecretKey(delete);
        sKeyChain.saveKeysToFile(null);
        
        update_private_key_table();
    }//GEN-LAST:event_delete_private_keyActionPerformed

    private void export_pub_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export_pub_keyActionPerformed
        // TODO add your handling code here:
        Path path = Utils.getUserSelectedFilePath( Utils.SAVE_DIALOG, "asc" );
        System.out.println(path.toString());
        
        //dohvati keyID
        int rowIdx = publicKeyTable.getSelectedRow();

        if( rowIdx < 0 )
            return;

        long keyID = ( long )publicKeyTable.getValueAt( rowIdx, 3 );
        
        PGPPublicKeyRing export_keypair = pKeyChain.getPublicKeyRing( keyID );
        pKeyChain.exportPublicKey( export_keypair, path.toString() );
    }//GEN-LAST:event_export_pub_keyActionPerformed

    private void delete_pub_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_pub_keyActionPerformed
        // TODO add your handling code here:
        int rowIdx = publicKeyTable.getSelectedRow();

        if( rowIdx < 0 )
            return;

        long keyID = ( long )publicKeyTable.getValueAt( rowIdx, 3 );
        PGPPublicKeyRing delete = pKeyChain.getPublicKeyRing( keyID );
        pKeyChain.removePublicKey(delete);
        pKeyChain.saveKeysToFile(null);
        
        update_public_key_table();
        
    }//GEN-LAST:event_delete_pub_keyActionPerformed

    private void sendMsgButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMsgButActionPerformed
        if(fromComboBox.getSelectedIndex() == -1) {
            sendWarningLabel.setText("Potreban pošaljilac!");
            return;
        }
        if(toComboBox.getSelectedIndex() == -1) {
            sendWarningLabel.setText("Potreban primalac!");
            return;
        }

        
        long sendKeyID = Utils.hexStringToKeyId( fromComboBox.getItemAt( fromComboBox.getSelectedIndex() ).split( "\\|" )[ 1 ] );
        long receiveKeyID = Utils.hexStringToKeyId( toComboBox.getItemAt( toComboBox.getSelectedIndex() ).split( "> \\| " )[ 1 ] );

        PGPSecretKeyRing sendsKeyRing = sKeyChain.getSecretKeyRing( sendKeyID );
        PGPSecretKey sendPK = sendsKeyRing.getSecretKeys().next();

        Iterator<PGPPublicKey> pubKeyIter = pKeyChain.getPublicKeyRing( receiveKeyID ).getPublicKeys();
        pubKeyIter.next();
        PGPPublicKey recievePU = pubKeyIter.next();


        char[]  password = sendPasswordField.getPassword();
        byte[] msg = new SimpleRFC288Message(fromComboBox.getItemAt( fromComboBox.getSelectedIndex() )  // sender name, e-mail & ID
                , toComboBox.getItemAt( toComboBox.getSelectedIndex() )                                 // reciever name, e-mail & ID
                , msgTextArea.getText()).ConvertToSimplifiedRFC822().getBytes();


        
        try {
            // START SEND
            if (!doSign.isSelected())
                msg = PGP.convertToPGP(msg);
            else {
                if (SecretKeyChain.isValidPassphrase( sendsKeyRing, 0, password ))
                    msg = PGP.sign(msg, sendPK, password);
                else {
                    sendWarningLabel.setText("Pogrešna šifra!");
                    return;
                }
            }
            if(doZip.isSelected()) {
                msg = PGP.zip(msg);
            }
            if(doEncryptSym.isSelected()) {
                int algorithm = PGPEncryptedData.TRIPLE_DES;
                if (jIDEAEncryptionRadioButton.isSelected()) algorithm = PGPEncryptedData.IDEA;
                msg = PGP.encrypt(msg, algorithm, recievePU);
            }

            
                Path directory = Utils.getUserSelectedFilePath(JFileChooser.SAVE_DIALOG, "gpg");

                Files.write( directory, msg );

            // END SEND
            CardLayout card = (CardLayout)jCardPanel.getLayout();
            card.show(jCardPanel, "homeCard");

            sendPanel.setSelectedIndex(0);
            sendWarningLabel.setText("");
        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            sendWarningLabel.setText("Error");
        }
        
    }//GEN-LAST:event_sendMsgButActionPerformed

    private void decrypt_message_button(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decrypt_message_button
        
        char[] password = decrypt_password_field.getPassword();

        try
        {
            PGP.decryptPgpMessage( password, this.pgp_mess );
            PGP.PgpDecryptionState pds = new PGP.PgpDecryptionState();

            InputStream inputStream = new ByteArrayInputStream( this.pgp_mess.encryptedMessage );
            inputStream = Utils.removeRadix64Encoding( inputStream );

            // check if message is radix64 encoded
            this.pgp_mess.isRadix64Encoded = inputStream instanceof ArmoredInputStream;

            // check if the message is encrypted
            PGP.checkIfEncrypted( inputStream, this.pgp_mess, pds );

            if( this.pgp_mess.isEncrypted )  // Message is encrypted, try to decrypt it
            {
                PGP.decrypt( this.pgp_mess, pds, password );
            }
            else  // Message is not encrypted
            {
                pds.currentMessage = pds.pgpObject;
            }

            // If compressed, decompress
            PGP.decompress( this.pgp_mess, pds );

            // check if the message is signed
            PGP.checkIfSigned( this.pgp_mess, pds );

            // Unpack literal, optionally verify message integrity
            // and read and check signature
            PGP.unpackLiteral( this.pgp_mess, pds );

            System.out.println( "this.pgp_mess.senderSecretKeyId: " + this.pgp_mess.senderSecretKeyId );
            
            SimpleRFC288Message rm = SimpleRFC288Message.fromSimplifiedRFC822(new String(this.pgp_mess.decryptedMessage));
            recieveTextArea.setText(rm.message);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PGPException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_decrypt_message_button

    private void import_message_button(java.awt.event.ActionEvent evt) {                                       
        try {
            Path encryptedFilePath = Utils.getUserSelectedFilePath( Utils.OPEN_DIALOG, "gpg" );
            if( encryptedFilePath == null )
                return;
            
            this.pgp_mess = new PGP.PgpMessage();
            
            // Read encrypted message
            File file = new File( encryptedFilePath.toString() );
            try(FileInputStream fin = new FileInputStream( file );)
            {
                byte fileContent[] = new byte[( int )file.length()];
                fin.read( fileContent );
                this.pgp_mess.encryptedMessage =  fileContent;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Utils.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Utils.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            InputStream inputStream = new ByteArrayInputStream( this.pgp_mess.encryptedMessage );
            inputStream = PGPUtil.getDecoderStream( new BufferedInputStream( inputStream ) );
            recieveTextArea.setText(Base64.toBase64String(this.pgp_mess.encryptedMessage));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void sendPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_sendPanelComponentShown
        update_email_from();
        update_email_to();
    }//GEN-LAST:event_sendPanelComponentShown


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField decrypt_password_field;
    private javax.swing.JCheckBox doEncriptAsym;
    private javax.swing.JCheckBox doEncryptSym;
    private javax.swing.JCheckBox doSerialize;
    private javax.swing.JCheckBox doSign;
    private javax.swing.JCheckBox doZip;
    private javax.swing.ButtonGroup dsaKeySizeBG;
    private javax.swing.ButtonGroup elgamalKeySizeBG;
    private javax.swing.JTextField emailField;
    private javax.swing.ButtonGroup encriptionAlgBG;
    private javax.swing.JComboBox<String> fromComboBox;
    private javax.swing.JDialog generatorDialog;
    private javax.swing.JPanel homePanel;
    private javax.swing.JRadioButton j3desEncryptionRadioButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jCardPanel;
    private javax.swing.JRadioButton jIDEAEncryptionRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane keyringPanel;
    private javax.swing.JTextArea msgTextArea;
    private javax.swing.JTextField nameField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton privateKeyImportBut;
    private javax.swing.JPanel privateKeyPanel;
    private javax.swing.JTable privateKeyTable;
    private javax.swing.JButton publicKeyImportBut;
    private javax.swing.JPanel publicKeyPanel;
    private javax.swing.JTable publicKeyTable;
    private javax.swing.JPanel recievePanel;
    private javax.swing.JTextArea recieveTextArea;
    private javax.swing.JButton sendMsgBut;
    private javax.swing.JTabbedPane sendPanel;
    private javax.swing.JPasswordField sendPasswordField;
    private javax.swing.JLabel sendWarningLabel;
    private javax.swing.JComboBox<String> toComboBox;
    // End of variables declaration//GEN-END:variables
}
